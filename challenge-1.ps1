$DockerNetworkName = "open-hack"

function killContainer([string]$ContainerName) {
    docker kill $ContainerName
    docker rm $ContainerName
}


# Create Docker Network
# docker network create -d bridge $DockerNetworkName

$ACRName="registryznq7406.azurecr.io"
# Build POI Container
cd src/poi
docker build -t openhack/poi  .
docker tag openhack/poi $ACRName/openhack/poi
docker push $ACRName/openhack/poi
cd ../..
cd src/trips
docker build -t openhack/trips  .
docker tag openhack/trips $ACRName/openhack/trips
docker push $ACRName/openhack/trips
cd ../..
cd src/tripviewer
docker build -t openhack/tripviewer  .
docker tag openhack/tripviewer $ACRName/openhack/tripviewer
docker push $ACRName/openhack/tripviewer
cd ../..
cd src/user-java
docker build -t openhack/user-java  .
docker tag openhack/user-java $ACRName/openhack/user-java
docker push $ACRName/openhack/user-java
cd ../..
cd src/userprofile
docker build -t openhack/userprofile  .
docker tag openhack/userprofile $ACRName/openhack/userprofile
docker push $ACRName/openhack/userprofile
cd ../..

# Run POI and MSSQL Container in same network
docker run -d --name=dataload --network=$DockerNetworkName -p 1433:1433 -e SQLUSER=sqladmin -e SQLPASS=changeme -e SQLDB=mydrivingDB -e ACCEPT_EULA=Y mcr.microsoft.com/mssql/server:2017-latest
docker run -d --name=openhack-poi --network=$DockerNetworkName -p 80:80 openhack/poi:latest

# Check if service is up
Write-Output "Waiting for 10 seconds for service to come up"
Start-Sleep -s 5
Write-Output "Service healthcheck local"
curl http://localhost/api/poi/healthcheck
Write-Output ""

# Kill the dataload containers
killContainer openhack-poi
killContainer dataload

# # Run with pulled container
# docker run -d --name=dataload --network=$DockerNetworkName -e SQLFQDN=changeme.database.windows.net -e SQLUSER=sqladmin -e SQLPASS=changeme -e SQLDB=mydrivingDB -e ACCEPT_EULA=Y registryznq7406.azurecr.io/dataload:1.0
# Write-Output "Waiting for 10 seconds for service to come up"
# Start-Sleep -s 10
# Write-Output "Healthcheck"
# curl http://localhost/api/poi/healthcheck
# Write-Output ""
# Write-Output "List all the points of interest."
# curl -i -X GET 'http://localhost/api/poi'
# Write-Output ""
# Write-Output "Fetch an existing point of interest with id 264ffaa3-1fe8-4fb0-a4fb-63bdbc9999ae"
# curl -i -X GET 'http://localhost/api/poi/264ffaa3-1fe8-4fb0-a4fb-63bdbc9999ae' 
# Write-Output ""
# Write-Output "Create a new point of interest for a HardBrake (poiType=2) event. The id will be autogenerated and returned."
# curl -i -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{ "tripId": "ea2f7ae0-3cef-49cb-b7d1-ce972113120c", "latitude": 47.39026323526123, "longitude": -123.23165568111123, "poiType": 2, "timestamp": "2019-07-12T02:30:03.351Z", "deleted": false }' 'http://localhost/api/poi' 
# Write-Output ""
# Write-Output "List all the points of interest for the specified trip with id ea2f7ae0-3cef-49cb-b7d1-ce972113120c."
# curl -i -X GET 'http://localhost/api/poi/trip/ea2f7ae0-3cef-49cb-b7d1-ce972113120c' 
# Write-Output ""